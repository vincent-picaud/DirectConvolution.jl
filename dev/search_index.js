var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DirectConvolution","category":"page"},{"location":"#DirectConvolution","page":"Home","title":"DirectConvolution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DirectConvolution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DirectConvolution\nusing DelimitedFiles","category":"page"},{"location":"#Use-cases","page":"Home","title":"Use cases","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"These demos use data stored in the data/ folder.","category":"page"},{"location":"","page":"Home","title":"Home","text":"data_1D=readdlm(joinpath(pwd(),\"..\",\"..\",\"data/signal_1.csv\"),',')","category":"page"},{"location":"","page":"Home","title":"Home","text":"Plot test","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PyPlot\n\nplot(data_1D[:,1],data_1D[:,2])\n\nsavefig(\"plot.svg\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: test fig)","category":"page"},{"location":"#Savitzky-Golay-filters","page":"Home","title":"Savitzky-Golay filters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Savitzky-Golay filters are a common approach to compute smoothed derivatives of a signal.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Creates a set of Savitzky-Golay filters using polynomial of degree 3 with a window width of 11=2times 5+1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"sg = SG_Filter(Float64,halfWidth=5,degree=3);","category":"page"},{"location":"","page":"Home","title":"Home","text":"This can be checked with ","category":"page"},{"location":"","page":"Home","title":"Home","text":"length(sg)\npolynomialOrder(sg)","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"scale","category":"page"},{"location":"#DirectConvolution.scale","page":"Home","title":"DirectConvolution.scale","text":"scale(λ::Int,Ω::UnitRange{Int})\n\nRange scaling.\n\nCaveat:\n\nWe do not use Julia =*= operator as it returns a step range:\n\njulia> r=6:8\n6:8\n\njulia> -2*r\n-12:-2:-16\n\nWhat we need is:\n\njulia> r=6:8\n6:8\n\njulia> scale(-2,r)\n-16:-12\n\n\n\n\n\n","category":"function"},{"location":"#Linear-Filters","page":"Home","title":"Linear Filters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LinearFilter","category":"page"},{"location":"#DirectConvolution.LinearFilter","page":"Home","title":"DirectConvolution.LinearFilter","text":"abstract type LinearFilter{T<:Number} end\n\nAbstract type defining a linear filter. \n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"The following functions are related to linear filters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"fcoef","category":"page"},{"location":"#DirectConvolution.fcoef","page":"Home","title":"DirectConvolution.fcoef","text":"fcoef(c::LinearFilter)\n\nReturns filter coefficients\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"DirectConvolution.length","category":"page"},{"location":"#Base.length","page":"Home","title":"Base.length","text":"length(c::LinearFilter)::Int\n\nReturns filter length\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"TODO: explain with an example","category":"page"},{"location":"","page":"Home","title":"Home","text":"offset","category":"page"},{"location":"#DirectConvolution.offset","page":"Home","title":"DirectConvolution.offset","text":"offset(c::LinearFilter)::Int\n\nReturns filter offset\n\nCaveat: the first position is 0 (and not 1)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"range","category":"page"},{"location":"#Base.range","page":"Home","title":"Base.range","text":"range(c::LinearFilter)::UnitRange\n\nReturns filter range Ω\n\nFilter support of a filter α is defined by Ω = [ - offset(α), length(α) -  offset(α) - 1 ]\n\n\n\n\n\n","category":"function"},{"location":"#Available-Linear-Filters","page":"Home","title":"Available Linear Filters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LinearFilter_Default","category":"page"},{"location":"#DirectConvolution.LinearFilter_Default","page":"Home","title":"DirectConvolution.LinearFilter_Default","text":"struct LinearFilter_Default{T<:Number,N}\n\nDefault linear filter.\n\nYou can create a filter as follows\n\njulia> linear_filter=LinearFilter([1,-2,1],1)\nDirectConvolution.LinearFilter_Default{Int64, 3}([1, -2, 1], 1)\n\n\njulia> offset(linear_filter)\n1\n\n\njulia> range(linear_filter)\n-1:1\n\n\n\n\n\n","category":"type"},{"location":"#Convolution-procedure","page":"Home","title":"Convolution procedure","text":"","category":"section"},{"location":"#Boundary-extension","page":"Home","title":"Boundary extension","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are several possible boundary extension:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ZeroPaddingBE","category":"page"},{"location":"#DirectConvolution.ZeroPaddingBE","page":"Home","title":"DirectConvolution.ZeroPaddingBE","text":"struct ZeroPaddingBE\n\nA type used to tag zero padding extension\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"ConstantBE","category":"page"},{"location":"#DirectConvolution.ConstantBE","page":"Home","title":"DirectConvolution.ConstantBE","text":"struct ConstantBE\n\nA type used to tag constant constant extension\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"PeriodicBE","category":"page"},{"location":"#DirectConvolution.PeriodicBE","page":"Home","title":"DirectConvolution.PeriodicBE","text":"struct PeriodicBE\n\nA type used to tag periodic extension\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"MirrorBE","category":"page"},{"location":"#DirectConvolution.MirrorBE","page":"Home","title":"DirectConvolution.MirrorBE","text":"struct MirrorBE\n\nA type used to tag mirror extension\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Contrary to other common library (TODO: give some examples) you have no restriction concerning domains.","category":"page"},{"location":"","page":"Home","title":"Home","text":"boundaryExtension","category":"page"},{"location":"#DirectConvolution.boundaryExtension","page":"Home","title":"DirectConvolution.boundaryExtension","text":"boundaryExtension(β::AbstractArray{T,1},\n                  k::Int,\n                  ::Type{BOUNDARY_EXT_TYPE})\n\nComputes extended boundary value β[k] given boundary extension type BOUNDARY_EXT_TYPE\n\nAvailable BOUNDARY_EXT_TYPE are:\n\nZeroPaddingBE: zero padding\nConstantBE: constant boundary extension padding\nPeriodicBE: periodic boundary extension padding\nMirrorBE: mirror symmetry boundary extension padding\n\nThe routine is robust in the sens that there is no restriction on k value.\n\njulia> dom = [-5:10;];\n\njulia> hcat(dom,map(x->boundaryExtension([1; 2; 3],x,ZeroPaddingBE),dom))'\n2×16 adjoint(::Matrix{Int64}) with eltype Int64:\n -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10\n  0   0   0   0   0  0  1  2  3  0  0  0  0  0  0   0\n\njulia> hcat(dom,map(x->boundaryExtension([1; 2; 3],x,ConstantBE),dom))'\n2×16 adjoint(::Matrix{Int64}) with eltype Int64:\n -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10\n  1   1   1   1   1  1  1  2  3  3  3  3  3  3  3   3\n\njulia> hcat(dom,map(x->boundaryExtension([1; 2; 3],x,PeriodicBE),dom))'\n2×16 adjoint(::Matrix{Int64}) with eltype Int64:\n -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10\n  1   2   3   1   2  3  1  2  3  1  2  3  1  2  3   1\n\njulia> hcat(dom,map(x->boundaryExtension([1; 2; 3],x,MirrorBE),dom))'\n2×16 adjoint(::Matrix{Int64}) with eltype Int64:\n -5  -4  -3  -2  -1  0  1  2  3  4  5  6  7  8  9  10\n  3   2   1   2   3  2  1  2  3  2  1  2  3  2  1   2\n\n\n\n\n\n\n","category":"function"},{"location":"#Computational-function","page":"Home","title":"Computational function","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"directConv!","category":"page"},{"location":"#DirectConvolution.directConv!","page":"Home","title":"DirectConvolution.directConv!","text":"directConv!\n\nComputes a convolution.\n\ngammak=sumlimits_iinOmega^alphaalphaibetak+lambda i\n\nThe following example shows how to apply inplace the [0 0 1] filter on γ[5:10] \n\njulia> β=[1:15;];\n\njulia> γ=ones(Int,15);\n\njulia> α=LinearFilter([0,0,1],0);\n\njulia> directConv!(α,1,β,γ,5:10)\n\njulia> hcat([1:length(γ);],γ)\n15×2 Matrix{Int64}:\n  1   1\n  2   1\n  3   1\n  4   1\n  5   7\n  6   8\n  7   9\n  8  10\n  9  11\n 10  12\n 11   1\n 12   1\n 13   1\n 14   1\n 15   1\n\n\n\n\n\n\n","category":"function"}]
}
