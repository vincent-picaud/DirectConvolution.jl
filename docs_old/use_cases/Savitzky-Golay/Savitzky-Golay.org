#+SETUPFILE: ../../Setup/setupFile-2.org
#+TITLE: Savitzky-Golay filters
#+PROPERTY: header-args:julia :session *session_usecase_sg*  :exports code :eval no-export

#+BEGIN_EXPORT latex
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\setminted[]{
  bgcolor=bg,
  breaklines=true,
  breakanywhere=true,
  mathescape,
  fontsize=\footnotesize}
#+END_EXPORT

#+BEGIN_SRC julia :exports none
using Plots
pyplot()
using DirectConvolution
#+END_SRC

#+RESULTS:

* Introduction

In the spectrometry community, [[https://en.wikipedia.org/wiki/Savitzky%25E2%2580%2593Golay_filter][Savitzky-Golay filters]] were a common
approach to smooth signal (before the Wavelets era).

Full API documentation is described in the [[id:b3e33804-4140-43be-a3eb-7dc02be41876][Savitzky-Golay Filters]] manual section.

* Savitzky-Golay filters
  :PROPERTIES:
  :ID:       ed4e3ecc-65ac-4391-ae19-8df759749162
  :END:

** Filter coefficients 

Creates a set of Savitzky-Golay filters. In this example, window width
is $11=2*5+1$ and polynomial degree is $3$.

#+BEGIN_SRC julia :results output none
sg = SG_Filter(Float64,halfWidth=5,degree=3);
#+END_SRC

#+RESULTS:

This can be checked with

#+BEGIN_SRC julia :exports both :wrap "EXAMPLE" :results output
length(sg)
polynomialOrder(sg)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
11
3
#+END_EXAMPLE

Savitzky-Golay filters can be used to smooth or to compute smoothed
derivatives of a signal. The associated filter is obtained thanks to
the =filter= function.

#+BEGIN_SRC julia :exports code :results output none
d0filter=filter(sg,derivativeOrder=0);
d1filter=filter(sg,derivativeOrder=1);
d2filter=filter(sg,derivativeOrder=2);
p=plot(range(d0filter),fcoef(d0filter), markershape = :hexagon,label="smoothing filter")
p=plot!(range(d1filter),fcoef(d1filter),markershape = :hexagon,label="d_1 filter")
p=plot!(range(d2filter),fcoef(d2filter),markershape = :hexagon,label="d_2 filter")
#+END_SRC


#+BEGIN_SRC julia :results graphics output :file figures/filter_coef.png :exports results
savefig(p,"figures/filter_coef.png")
#+END_SRC

#+ATTR_HTML: :align center :width 600px
#+NAME: fig_sg_filter
#+CAPTION: Savitzky-Golay filters
#+RESULTS:
[[file:figures/filter_coef.png]]


Maximum derivative order is equal to the polynomial order, however there is a dedicated function:

#+BEGIN_SRC julia :exports both :wrap "EXAMPLE" :results output
maxDerivativeOrder(sg)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
3
#+END_EXAMPLE

** Smoothing example
   :PROPERTIES:
   :ID:       2de0dd03-d798-4166-bcdc-d360a8977a8a
   :END:
#+INDEX: Savitzky-Golay!1D

First load a signal 
 
#+BEGIN_SRC julia :exports code :results output none 
signal=readcsv(joinpath(DirectConvolution.RootDir,"data/signal_1.csv"));
signal=signal[:,2];
 #+END_SRC

then compute a smoothed version

#+BEGIN_SRC julia :exports code :results output none
sg = SG_Filter(Float64,halfWidth=5,degree=3);
smoothed=apply_SG_filter(signal,sg,derivativeOrder=0)

p=plot(signal,label="signal")
p=plot!(smoothed, label="smoothed",linewidth=2)
p=plot!(signal-smoothed, label="residue")
#+END_SRC

#+BEGIN_SRC julia :results graphics output :file figures/sg.png :exports results
savefig(p,"figures/sg.png")
#+END_SRC

#+ATTR_HTML: :align center :width 600px
#+CAPTION: Savitzky-Golay smoothing
#+RESULTS:
[[file:figures/sg.png]]


** First order smoothed derivative 

Smoothed first order derivative example:

#+BEGIN_SRC julia :exports code :results output none
smoothed_d1=apply_SG_filter(signal,sg,derivativeOrder=1)

p=plot(signal,label="signal")
p=plot!(smoothed_d1, label="smoothed derivative",linewidth=2)
#+END_SRC

#+BEGIN_SRC julia :results graphics output :file figures/sg_d1.png :exports results
savefig(p,"figures/sg_d1.png")
#+END_SRC

#+ATTR_HTML: :align center :width 600px
#+CAPTION: Savitzky-Golay smoothed first order derivative
#+RESULTS:
[[file:figures/sg_d1.png]]


** 2D example 
#+INDEX: Savitzky-Golay!2D

Signal is:

#+BEGIN_SRC julia :exports code :results output none 
signal2D=readdlm(joinpath(DirectConvolution.RootDir,"data/surface.data"));
surface(signal2D,label="2D signal");
 #+END_SRC

#+ATTR_HTML: :align center :width 600px
#+BEGIN_SRC julia :results graphics output :file ./figures/signal2D.png :exports results
savefig("./figures/signal2D.png")
 #+END_SRC

 #+RESULTS:
 [[file:./figures/signal2D.png]]

Following [[id:2de0dd03-d798-4166-bcdc-d360a8977a8a][Smoothing example]] we can perform 2D smoothing as follows:

#+BEGIN_SRC julia :exports code :results output none
sg_I = SG_Filter(Float64,halfWidth=5,degree=3);
sg_J = SG_Filter(Float64,halfWidth=3,degree=3);

smoothed2D = apply_SG_filter2D(signal2D,
                               sg_I,
                               sg_J,
                               derivativeOrder_I=0,
                               derivativeOrder_J=0)

surface(smoothed2D,label="Smoothed 2D signal");
#+END_SRC

#+BEGIN_SRC julia :results graphics output :file ./figures/smoothedSignal2D.png :exports results
savefig("./figures/smoothedSignal2D.png")
 #+END_SRC

#+ATTR_HTML: :align center :width 600px
 #+RESULTS:
 [[file:./figures/smoothedSignal2D.png]]

*Caveat:* the function name is =apply_SG_filter2D= and not =apply_SG_filter=
